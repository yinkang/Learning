#############################################
Mysql Note
Reference to 高性能MySQL
Start with "---" means need attention.
#############################################

1（P121） Difference between Timestamp and DateTime
         +-------------------+-------------+
　　   | 列类型　　　　   | 显示格式　　       |
　　   | timestamp(14) | yyyymmddhhmmss     |　
　　   | timestamp(12) | yymmddhhmmss　     |
　　   | timestamp(10) | yymmddhhmm　       |
　   　| timestamp(8)　| yyyymmdd　         |
　　   | timestamp(6)　| yymmdd　　　　      |
　　   | timestamp(4)　| yymm　　　　　      |
　　   | timestamp(2)　| yy　　　　　　       |
　　   +-------------------+———————  +

你可以在创建表时指定一个任意的显示尺寸，但是定义列长为0或比14大均会被强制定义为列长14。

　　列长在从1～13范围的奇数值尺寸均被强制为下一个更大的偶数。

　　定义字段长度　　 强制字段长度

　　timestamp(0) ->　timestamp(14)
　　timestamp(15)->　timestamp(14)
　　timestamp(1) ->　timestamp(2)
　　timestamp(5) ->　timestamp(6)

2（P113）TinyInt(N) 或者Int(N)里面的N对实际的取值范围、存储和计算都没有任何影响，仅在部分的client端的显示有影响（目前没找到有影响的client）

3（P114）
1)Decimal 最多允许65个数字其中,每9个数字占用4个字节,然后小数点占用1个字节。
2)数据量比较大的时候,可以考虑使用BigInt来实现,将其乘一定的倍数之后,可避免精度丢失以及精确计算的代价高的问题。

4（P115）
1) Varchar
①在5.0及其以后会保留末尾空格,在之前会踢出末尾空格
②适合用于以下情况: 字符串列的最大长度比平均长度大很多;列的更新少;使用了UTF-8这样复杂的字符集。
③需要多余的一个或者两个字节用于存储长度,当长度loe255字节时用一个字节保存,否则用两个字节。
2) Char
①会剔除所有的末尾空格
②适用于: 存储很短的字符串，或者所有值都接近的一个长度。
③在比较时会填充空格
3)binary 与Varbinary（二进制字符串）
保存的是字节码而不是字符串,其他的与varchar与char之间基本类似
---binary在检索时会自动填充 \0 会影响检索效果

5(P118) Blob or text 属于超长的字节码和字符串,可以用order by sustring(column,length)来按照其一部分长度进行排序,
但是不能用其所有的长度进行索引,也不能用索引来消除排序（need further learning）
eg: alter tb_name add key [indexName](column_name(length))

6(P124)
1)Enum 类型在插入的时候是不区分大小写的,但是会按照实际的情况按照实际enum的大小写来 format 如 enum为‘DOG’,插入‘doG’ 就会被format成‘DOG’;
2)Enum 字段这是按照内部存储的整数而不是定义的字符串进行排序的。可以在定义的时候按照字母排序来定义或者使用field()函数。
Related SQL:
select enum_name + 0 from table_name;
select * from table_name order by field('enum_name','type1','type2','type3');

7(P121) query_cache_type
query_cache_type
Related SQL:
show variables like '%query_cache%';
set query_cache_type = 0;

8(P125) 在选择标识符（用于与其他表进行比较如在关联操作的时候）,不同表的标志符的字段必须要精确匹配（类型,长度）。
（在InnoDB引擎中,类型不完全匹配时不允许创建外键,但是长度不同的varchar是例外）推荐使用int,不推荐varchar和enum类型.

9(P132)
1)汇总表: 在需要执行需要查询几乎所有的表的操作的时候,可以使用汇总表,先将其汇总信息保存在一个新表中,使用不完全同步的信息,或者使用增量同步的方式实现信息的完全同步
2)缓存表: 对于一个需要很多不同的索引组合俩加速各种类型的查询,可以再创建一相同的表作为缓存表,而在缓存表中使用不同的引擎或者换到不同的系统中。
3)计数器表,应用在表中保存计数器时,可能会导致锁问题,这时可以将计数器保存在很多行中,每次更新的时候,随机选择一项进行更新。

10(P142)
Btree 索引:MySQL 索引的实现是在引擎层的,如果没有指明索引类型,一般都是BTree索引。
BTree 索引适用于全键值、键值范围或者键前缀查找。其中键前缀查找只适用于最左键前缀查找。不支持部分索引。
Hash 索引 :  优点,全值查找时速度非常快。
             限制,①哈希索引只保存哈希值和行指针,并不保存数据值,因此不能使用索引中的值来避免读取行。②因为哈希索引不是按照值排序的,因此无法排序。
                 ③不支持部分索引值匹配。④只支持等值匹配如=或者<>,不支持范围查询。
                 ④当两行的哈希值相同时（即哈希冲突）,存储引擎必需遍历链表中所有的行指针,逐行匹配。冲突越多,索引查找速度越慢,索引的维护代价越大。

11(P149)
触发器,可用于在指定在数据在被INSERT,UPDATE和DELETE的时候执行指定的操作,其中有BEFORE 和AFTER 两种时间,与对应的条件组合起来共有6种触发器,
一个表不可能有两个相同条件下的触发器,因为一个触发器中可以执行多个语句。
DELIMITER $  /*因为在trigger_stmt中可能有很多个语句,语句之间要用";"分隔,而";"在sql中会被认为是一个语句的结束语句,因此将分隔符改成$或者其他符号都可以*/
CREATE TRIGGER trigger_name
BEFORE|AFTER
INSERT|UPDATE|DELETE ON tbl_name
FOR EACH ROW
BEGIN
[trigger_stmt]
END
DELIMITER ;
在trigger_stmt中可以对不同的数据进行操作,其中NEW标识将要被插入的数据,是允许修改的。OLD标识将要被删除的数据,是只读的。

12(P151)
一些其他的索引:空间数据索引,全文索引,分形树索引。

13(P152)
索引的优点:
减少了服务器需要扫描的数据量
帮助服务器避免排序和临时表
将服务器的随机I/O变成了顺序I/O.

判断一个索引是否适合某个查询的三星标准:
索引将相关的数据放到一起,则为一星。
索引中得数据顺序和查找顺序一致,则为二星
索引中的的列包含了查询中需要的全部的列这获得三星。

14（P154）
使用索引时只能将索引作为一个独立的列,不可用于表达式或者函数的参数 如select
前缀索引与索引选择性:
前缀索引即使用某一个字段的一部分来获取建立索引（如果该字段长度过长）。
InnoDB不支持后缀索引,只能通过将数据翻转后创建前缀索引的方式实现。
索引选择性:指不重复的索引的数量a与总的数据量b的比值,比值越大越好

15(P161)
多列索引（选择合适的索引顺序）
索引选择性越高的越靠前。
(索引选择性高的索引在特殊情况下也可能极慢)。

16(P162)聚簇索引
MySQL InnoDB一定会建立聚簇索引，把实际数据行和相关的键值保存在一块，这也决定了一个表只能有一个聚簇索引，即MySQL不会一次把数据行保存在二个地方。
1)  InnoDB通常根据主键值(primary key)进行聚簇
2) 如果没有创建主键，则会用一个唯一且不为空的索引列做为主键，成为此表的聚簇索引
3) 上面二个条件都不满足，InnoDB会自己创建一个虚拟的聚集索引
如果主键是一个列前缀索引,InnoDB也会包含完整的主键列和剩下的其他列
优点：
聚簇索引的优点,就是提高数据访问性能。聚簇索引把索引和数据都保存到同一棵B+树数据结构中，并且同时将索引列与相关数据行保存在一起。
这意味着，当你访问同一数据页不同行记录时，已经把页加载到了Buffer中，再次访问的时候，会在内存中完成访问，不必访问磁盘。
不同于MyISAM引擎，它将索引和数据没有放在一块，放在不同的物理文件中，索引文件是缓存在key_buffer中，索引对应的是磁盘位置，不得不通过磁盘位置访问磁盘数据。
缺点：
1) 维护索引很昂贵，特别是插入新行或者主键被更新导至要分页(page split)的时候。
   建议在大量插入新行后，选在负载较低的时间段，通过OPTIMIZE TABLE优化表，因为必须被移动的行数据可能造成碎片。使用独享表空间可以弱化碎片
2) 表因为使用UUId作为主键，使数据存储稀疏，这就会出现聚簇索引有可能有比全表扫面更慢，所以建议使用int的auto_increment作为主键
3) 如果主键比较大的话，那辅助索引将会变的更大，因为辅助索引的叶子存储的是主键值；过长的主键值，会导致非叶子节点占用占用更多的物理空间

17(P169)
在InnoDB表中建议按照主键顺序插入行（在高并发的情况下,使用AUTO_INCREMENT的作为主键,会造成明显的主键争用）
InnoDB默认的最大填充因子是页大小的15/16,留出部分空间用于以后修改

18(P171)
如果索引中包含所需要查询的字段的值,我们称之为覆盖索引。
哈希索引,空间索引和全文索引不包含列的值,因此无法实现覆盖索引。目前只有BTree索引支持覆盖索引。
如果覆盖索引包含select时所需的所有的量,则在select无需访问table data
Explain出来的extra列值为using index说明MySQL使用了索引来匹配。

19（P173）---ICP(Index Condition PushDown)索引条件推送
Definition:Without ICP, the storage engine traverses the index to locate rows in the base table
and returns them to the MySQL server which evaluates the WHERE condition for the rows.
With ICP enabled, and if parts of the WHERE condition can be evaluated by using only fields from the index,
the MySQL server pushes this part of the WHERE condition down to the storage engine.
Purpose:The goal of ICP is to reduce the number of full-record reads and thereby reduce IO operations.
This strategy can be used for InnoDB and MyISAM tables.
(Note that index condition pushdown is not supported with partitioned tables in MySQL 5.6; this issue is resolved in MySQL 5.7.)
For InnoDB tables, however, ICP is used only for secondary indexes.
在MySQL版本低于5.6的版本中,数据库的storage engine会将将数据返回到 Server 端之后进行 where 筛选,因此需要使用延迟关联。

20 (P175)索引排序
MySQL生成有序结果的两种方式:通过排序操作;按照索引顺序扫描。
Explain出来的type列值为index说明MySQL使用了索引扫描来做排序。
设计索引时,最好即满足排序,又可用于查找行。
使用索引排序的条件
①只有当索引的列顺序和ORDER BY子句的顺序完全一致,并且所有列的排序方式（倒序或者正序）都一样时,MySQL才能够使用索引对结果进行排序。
②如果查询需要关联多张表时,只有ORDER BY子句所引用的字段全部在第一张表中时才可使用索引排序
③ORDER BY也需要满足索引的最左前缀要求。
④若不满足索引的最左前缀条件,前导列为常量时也满足要求。
（如tb_name存在索引idx_date_name（date,name） 则 select * from tb_name where date = '2012-12-12' order by name 也可使用索引排列。）

21（P177）索引压缩
1)myisam使用前缀压缩来减少索引的大小，从而让更多的索引可以放入内存中，默认只压缩字符串，但通过参数配置也可以对整数做压缩.(PACK_KEYS 为1时,数字和字符串都会压缩,)
myisam压缩每个索引块的方法是，先完全保存索引块中的第一个值，然后将其他值和第一个值进行比较得到相同前缀的字节数（长度）和剩余的不同后缀部分（即把相同部分去掉），
把这部分存储起来即可（相同前缀长度和不同后缀部分字符串）。
如：索引块中的第一个值是perform，第二个是performance，那么第二个值的前缀压缩后存储的是类似7,ance，这样的形式，myisam对行指针也采用类似的前缀压缩方式。
2)压缩块使用更少的空间，代价是某些操作可能更慢，因为每个值的压缩前缀都依赖于前面的值，所以myisam查找时无法在索引块使用二分查找而只能从头开始扫描，正序的扫描速度还不错，
但如果是倒序扫描，如：order by desc就不是很好了，所有在块中查找某一行的操作平均都需要扫描半个索引块。
3)测试表明，对于CPU密集型应用，因为扫描需要随机查找，压缩索引使得myisam在索引查找上要慢好几倍，压缩索引的倒序扫描就更慢了，
压缩索引需要在CPU内存资源与磁盘之间做权衡，压缩索引可能只需要十分之一大小的磁盘，如果是IO密集型应用，对于某些查询带来的好处会比成本多很多。
即压缩索引适合IO密集型应用，不太适合CPU密集型应用。
{扩展:CPU-bound(计算密集型) 和I/O bound(I/O密集型):
I/O bound 指的是系统的CPU效能相对硬盘/内存的效能要好很多，此时，系统运作，大部分的状况是 CPU 在等 I/O (硬盘/内存) 的读/写，此时 CPU Loading 不高。
CPU bound 指的是系统的 硬盘/内存 效能 相对 CPU 的效能 要好很多，此时，系统运作，大部分的状况是 CPU Loading 100%，CPU 要读/写 I/O (硬盘/内存)，
I/O在很短的时间就可以完成，而 CPU 还有许多运算要处理，CPU Loading 很高。
}

22 (P179)冗余与重复索引
如果创建了索引（A,B）,再创建索引(A)就是冗余索引。
但是对于索引排序时,对于前缀索引的前导列为常量的部分,如select * from tb_name where A = ? order by C.此时,如果将索引（A）扩展为（A，B）就会导致索引排序失效。
{扩展
QPS query per second
工具:common_schema,可以生成不同的表的数据。原理可能是通过触发器的方式实现。
}

23 (P8)隔离级别
READ UNCOMMITTED(未提交读)
READ COMMITTED(提交读)     大部分数据库的默认隔离级别
REPEATABLE READ(可重复读)   MySQL的默认隔离级别
SERIALIZABLE(可串行化)
脏数据               事务读取到未提交的数据
不可重复读            事务读取数据之后,原数据被删除或者修改,事务再次读取时数据不一致（主要在 delete 和 update 操作）
幻读(Phantom Read)   事务读取一个范围的数据之后,此时其他事务插入此范围的数据,事务会发现已经还有部分数据是该事务未读取到的（主要在 insert 操作）

24（P10）自动提交
---在支持事务的表中（如 InnoDB 支持事务,而 MyISAM 不支持事务）默认是一个操作执行了之后自动提交, 如果设置 autocommit=0,则在执行一个操作之后不会自动提交,知道执行commit。

25 (P183) 索引案例学习
1)尽可能重用索引
在设计支持多重条件搜索的需求时,为减少索引的数量,可以将选择性低且possible value较少的列放在索引前缀用于存放索引,如sex,当不需要这一列的search的select的时候,直接使用 in
包含所有的值即可，以此方法实现的组合数不能太多,如 sex（F and M） 和 eye_color(brown,blue,hazel)就有 2*3 种组合,当组合数达到上千个的时候需要小心。
2)避免范围查询
MySQL无法使用范围查询后的条件的索引,但是对于等值查询是可以的。
3)优化排序
在排序搜索时,如果查询的结果太多,如几百万行,然后where只有sex列,如果需要排序
在对于选择性低的列,我们可以增加一些索引用于排序,如（sex,rating）,并使用 order by 和 limit 如下:
select * from db_name where sex = 'm' order by rating limit 10;
在MySQL低于5.6的版本中,也可以使用延迟关联来提高效率

26 (P195) 查询性能优化
对于低效的查询,可以通过以下两个步骤来分析:
1)确认应用程序是否在检索大量超过需要的数据,意味着访问了太多的行或者列
①查询不需要的记录
②多变关联时返回全部列
③总是取出全部列
④重复查询相同的数据
2)确认MySQL服务器是否在分析大量超过需要的数据列
判断依据
①响应时间:服务时间与排队时间之和
②扫描的行数
③返回的行数

27 Join 时 Using 与 on 的区别
Using 要求两个表中的列名称类型必需完全相等,select 出的数据相同的列只会出现一次
on 则允许更灵活的名称,并且 select 出来相同的列会出现两次。`
 Select * from table_a a join table_b b on a.id = b.id（此时id列会在结果中出现两次）在选择相等的时必需使用 tb_name.col_name 的形式来查询,否则
 Select * from table_a join table_b using(id)(此时id列会在结果中出现一次)

28 Key 与 Index 的区别
1)key 是数据库的物理结构，它包含两层意义，一是约束（偏重于约束和规范数据库的结构完整性），二是索引（辅助查询用的）。包括primary key, unique key, foreign key 等。
  primary key 有两个作用，一是约束作用（constraint），用来规范一个存储主键和唯一性，但同时也在此key上建立了一个index；
  unique key 也有两个作用，一是约束作用（constraint），规范数据的唯一性，但同时也在这个key上建立了一个index；
  foreign key也有两个作用，一是约束作用（constraint），规范数据的引用完整性，但同时也在这个key上建立了一个index；
  可见，mysql的key是同时具有constraint和index的意义，这点和其他数据库表现的可能有区别。（至少在oracle上建立外键，不会自动建立index），因此创建key也有如下几种方式：
  （1）在字段级以key方式建立， 如 create table t (id int not null primary key);
  （2）在表级以constraint方式建立，如create table t(id int, CONSTRAINT pk_t_id PRIMARY key (id));
  （3）在表级以key方式建立，如create table t(id int, primary key (id));
  其它key创建类似，但不管那种方式，既建立了constraint，又建立了index，只不过index使用的就是这个constraint或key。
2)index是数据库的物理结构，它只是辅助查询的，它创建时会在另外的表空间（mysql中的innodb表空间）以一个类似目录的结构存储。索引要分类的话，分为前缀索引、全文本索引等；
  因此，索引只是索引，它不会去约束索引的字段的行为（那是key要做的事情）。
  如，create table t(id int, index inx_tx_id  (id));

29 (P201)重构查询的方式
1)切分查询,如删除掉表中的1,000,000,000 条数据, 可以通过每次删除一万条的方式实现。
2)分解关联操作,在关联两张很大的表时,可以通过分解每条单独的查询吼在应用程序中关联,有以下好处
①提高缓存命中率,将每个单独的查询缓存后命中率远比关联后的查询的命中率高
②执行单个查询减少锁的竞争
③在应用层进行拆分,可以更容易对数据库进行拆分,更容易做到高性能和可扩展。
④减少冗余查询,在应用层关联时,以为对一些记录只需要查询一次,而在数据库中关联时可能需要重复访问一部分数据。
⑤在应用中可以使用哈希关联的方式实现,而不需要使用MySQL的嵌套循环关联。

30 Join 的各种区别:
left join  = left outer join
right join = right outer join
inner join
